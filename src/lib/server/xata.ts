// Generated by Xata Codegen 0.23.2. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    columns: [
      { name: "displayName", type: "string", unique: true },
      { name: "name", type: "string" },
      { name: "email", type: "email", unique: true },
      { name: "password", type: "string" },
      {
        name: "createdAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      {
        name: "updatedAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      { name: "description", type: "string" },
      { name: "location", type: "string" },
      { name: "pinnedTweet", type: "link", link: { table: "tweets" } },
      { name: "followerCount", type: "int", notNull: true, defaultValue: "0" },
      { name: "followingCount", type: "int", notNull: true, defaultValue: "0" },
      { name: "tweetCount", type: "int", notNull: true, defaultValue: "0" },
    ],
  },
  {
    name: "tweets",
    columns: [
      { name: "text", type: "string", notNull: true, defaultValue: '""' },
      { name: "user", type: "link", link: { table: "users" } },
      {
        name: "createdAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      { name: "likeCount", type: "int", notNull: true, defaultValue: "0" },
      { name: "retweetOf", type: "link", link: { table: "tweets" } },
      { name: "retweetCount", type: "int", notNull: true, defaultValue: "0" },
      { name: "quoteOf", type: "link", link: { table: "tweets" } },
      { name: "quoteCount", type: "int", notNull: true, defaultValue: "0" },
      { name: "replyOf", type: "link", link: { table: "tweets" } },
      { name: "replyCount", type: "int", notNull: true, defaultValue: "0" },
      { name: "bookmarkCount", type: "int", notNull: true, defaultValue: "0" },
      {
        name: "entities",
        type: "object",
        columns: [{ name: "hashtags", type: "multiple" }],
      },
    ],
  },
  {
    name: "bookmarks",
    columns: [
      { name: "tweet", type: "link", link: { table: "tweets" } },
      { name: "user", type: "link", link: { table: "users" } },
      {
        name: "createdAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
    ],
  },
  {
    name: "likes",
    columns: [
      { name: "user", type: "link", link: { table: "users" } },
      { name: "tweet", type: "link", link: { table: "tweets" } },
      { name: "likedAt", type: "datetime", notNull: true, defaultValue: "now" },
    ],
  },
  {
    name: "notifications",
    columns: [
      { name: "from", type: "link", link: { table: "users" } },
      { name: "to", type: "link", link: { table: "users" } },
      {
        name: "createdAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      { name: "tweet", type: "link", link: { table: "tweets" } },
      { name: "type", type: "string" },
      { name: "reply", type: "link", link: { table: "tweets" } },
    ],
  },
  {
    name: "folder",
    columns: [
      { name: "name", type: "string" },
      { name: "description", type: "string" },
      {
        name: "createdAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      { name: "user", type: "link", link: { table: "users" } },
    ],
  },
  {
    name: "follow",
    columns: [
      { name: "follower", type: "link", link: { table: "users" } },
      { name: "followed", type: "link", link: { table: "users" } },
      {
        name: "followedAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
    ],
  },
  {
    name: "feed",
    columns: [
      { name: "user", type: "link", link: { table: "users" } },
      {
        name: "updatedAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
    ],
  },
  {
    name: "feedTweet",
    columns: [
      { name: "tweet", type: "link", link: { table: "tweets" } },
      { name: "feed", type: "link", link: { table: "feed" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Tweets = InferredTypes["tweets"];
export type TweetsRecord = Tweets & XataRecord;

export type Bookmarks = InferredTypes["bookmarks"];
export type BookmarksRecord = Bookmarks & XataRecord;

export type Likes = InferredTypes["likes"];
export type LikesRecord = Likes & XataRecord;

export type Notifications = InferredTypes["notifications"];
export type NotificationsRecord = Notifications & XataRecord;

export type Folder = InferredTypes["folder"];
export type FolderRecord = Folder & XataRecord;

export type Follow = InferredTypes["follow"];
export type FollowRecord = Follow & XataRecord;

export type Feed = InferredTypes["feed"];
export type FeedRecord = Feed & XataRecord;

export type FeedTweet = InferredTypes["feedTweet"];
export type FeedTweetRecord = FeedTweet & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
  tweets: TweetsRecord;
  bookmarks: BookmarksRecord;
  likes: LikesRecord;
  notifications: NotificationsRecord;
  folder: FolderRecord;
  follow: FollowRecord;
  feed: FeedRecord;
  feedTweet: FeedTweetRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://primera-vk1k74.us-east-1.xata.sh/db/twitter",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
